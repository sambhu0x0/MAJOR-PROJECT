# -*- coding: utf-8 -*-
"""sparktest9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uPFIf08oMYkTV-SsO-YQWw9wgT1uXuIl
"""

from pyspark.sql import SparkSession
from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.ml.recommendation import ALS
from pyspark.sql.functions import lit

# Setup Spark Session
spark = SparkSession.builder.appName('Recommender').getOrCreate()

# Read the movies and ratings data
movies = spark.read.csv('movies_metadataCopy.csv', header=True, inferSchema=True)
ratings = spark.read.csv('ratings_small.csv', header=True, inferSchema=True)

# Build the recommendation model using ALS on the ratings data
als = ALS(maxIter=5, regParam=0.01, userCol="userId", itemCol="movieId", ratingCol="rating", coldStartStrategy="drop")
model = als.fit(ratings)

# Define a function to get recommendations for a given user
def get_recommendations(userId):
    # Create a dataframe with the given userId and all movieIds
    movieIds = ratings.select('movieId').distinct()
    movieIds = movieIds.withColumn('userId', lit(userId))

    # Use the ALS model to predict ratings for the given userId and all movieIds
    predictions = model.transform(movieIds)

    # Get the top 10 movieIds with the highest predicted ratings
    top_movieIds = predictions.orderBy('prediction', ascending=False).limit(10)

    # Join with the movies dataframe to get the movie titles
    recommendations = movies.join(top_movieIds, 'movieId').select('title')

    return recommendations

# Test the get_recommendations function with a user id
recommendations = get_recommendations(1)
recommendations.show()

spark.stop()